=== blahdeblah_ is now known as blahdeblah
=== ubot3 is now known as ubottu
[19:06] <ahasenack> hi apparmor people,
[19:06] <ahasenack> I'm troubleshooting a test failure (https://bugs.launchpad.net/ubuntu/+source/nbd/+bug/2078255)
[19:06] -ubottu:#ubuntu-security- Launchpad bug 2078255 in nbd (Ubuntu) "autopkgtest error: rm: cannot remove '/tmp/tmp.OoiXjLc9ID/root': Permission denied" [High, Triaged]
[19:06] <ahasenack> the test shows error like
[19:06] <ahasenack> + unshare --user --map-auto --map-user=65536 --map-group=65536 --keep-caps -- rm -Rf /tmp/tmp.0UBlGjcwfw
[19:06] <ahasenack> rm: cannot remove '/tmp/tmp.0UBlGjcwfw/etc/apt/apt.conf.d/00mmdebstrap': Permission denied
[19:06] <ahasenack> weird permission denied ones
[19:06] <ahasenack> and I see this in dmesg
[19:06] <ahasenack> [ 1172.201512] audit: type=1400 audit(1725908412.801:142): apparmor="AUDIT" operation="userns_create" class="namespace" info="Userns create - transitioning profile" profile="unconfined" pid=16771 comm="unshare" requested="userns_create" target="unprivileged_userns"
[19:06] <ahasenack> it's AUDIT, not DENIED
[19:06] <ahasenack> but hmmm, it smells
[19:07] <ahasenack> any hints as to what I should check? The whole user namespaces thing?
[19:10] <georgiag> ahasenack: correct. instead of outright denying the creation of unpriv user namespaces, we created the unprivileged_userns profile which we transition to (from unconfined) when trying to create the userns. the only thing is that this profile does not allow the use of capabilities
[19:11] <ahasenack> and if it were to deny that (i.e., if capabilities were tried), I would see a DENIED message?
[19:12] <georgiag> ahasenack: yes. unprivileged_userns has the rule "audit deny capability,"
[19:12] <ahasenack> ok, I have no denies, so the problem must be elsewhere
[20:29] <ahasenack> georgiag: ok, turns out this test needs capabilities
[20:29] <ahasenack> but I didn't see a DENIED in the logs, just the AUDIT
[20:29] <ahasenack> does the AUDIT log differentiate between deny and allow?
[20:29] <ahasenack> or maybe I just missed it
[20:29] <ahasenack> profile unprivileged_userns {
[20:29] <ahasenack>      audit deny capability,
[20:30] <ahasenack> changing that to allow made the command pass
[20:37] <ahasenack> with "deny", this is all I get in dmesg (and the command fails):
[20:37] <ahasenack> [Mon Sep  9 20:36:51 2024] audit: type=1400 audit(1725914211.708:171): apparmor="AUDIT" operation="userns_create" class="namespace" info="Userns create - transitioning profile" profile="unconfined" pid=50889 comm="unshare" requested="userns_create" target="unprivileged_userns"
[20:37] <ahasenack> if I change that to allow, the command works
[20:37] <ahasenack> and I get one extra apparmor AUDIT log
[20:37] <ahasenack> apparmor="AUDIT" operation="capable" class="cap" profile="unprivileged_userns" pid=50944 comm="mkfs.ext4" capability=2  capname="dac_read_search"
[20:37] <georgiag> ahasenack: AUDIT appears only when the rule contains audit or if the profile contains the audit and/or complain flags
[20:37] <ahasenack> so capabilities being denied was nog logged
[20:39] <georgiag> I wonder if the log is being discarded or if there's a bug somewhere
[20:39] <ahasenack> let me try to get you a simple reproducer
[20:40] <ahasenack> hm
[20:40] <ahasenack> no, let me write this up before
[20:41] <georgiag> thanks
[20:50] <ahasenack> georgiag: ok, try this please: https://pastebin.ubuntu.com/p/k4TvXHWsz7/
[20:51] <ahasenack> I can't tell you yet what is wrong/right, just that I'm missing a DENIED in the logs
[20:51] <ahasenack> and it looks like this unshare command needs capabilities indeed, and I need to find a way to grant it in this test case
[21:01] <ahasenack> is this the kind of exploit we want to avoid with the userns apparmor rule? https://pastebin.ubuntu.com/p/D8pKmFvv5t/ Note there I changed the capability to allow (from deny)
[21:02]  * ahasenack wonders how many people in this channel highlight on "exploit" ;)
[21:03] <ahasenack> with execsnoop: https://pastebin.ubuntu.com/p/rGcCTvs5zc/
[21:05] <rlee287> ahasenack: quick sanity check: are you getting the missing entries even with printk ratelimiting disabled?
[21:06] <ahasenack> rlee287: I didn't touch rate limiting, but since I can flip back and forth and repeat it as will, without missing messages between the attempts
[21:06] <ahasenack> s/as will/at will/
[21:06] <ahasenack> this is an oracular vm, btw
[21:07] <rlee287> OK, might want to turn off printk ratelimiting just in case, still
[21:08] <rlee287> Taking a look at the first pastebin
[21:13] <georgiag> ahasenack: I'm not sure if that's exactly what we are trying to prevent, but it's mostly related to privilege escalation using kernel bugs. so in a user namespace one would be root and have CAP_NET_ADMIN, then they could leverage a bug in the network stack to gain privilege out of the user namespace
[21:14] <rlee287> I didn't get the permission denied error that you did, although I had to install the uidmap package first
[21:14] <rlee287> I did install a kernel from a PPA though so let me check first whether the issue occurs without the PPA
[21:14] <ahasenack> this is simplifying a dep8 test that started to fail in noble
[21:15] <ahasenack> I don't think the test has corrupted the environment, but I could have missed something
[21:16] <ahasenack> this is the test, and the command that is failing is on this line: https://git.launchpad.net/ubuntu/+source/nbd/tree/debian/tests/initrd-boot?h=applied/ubuntu/devel#n36
[21:17] <ahasenack> it fails in multiple places, I addressed some, and the last one is that unshare command from the pastebins that is doing mkfs.ext4
[21:18] <rlee287> OK; reproduced your permission denied error with the stock Ubuntu kernel
[21:18] <rlee287> *Ubuntu oracular kernel
[21:19] <rlee287> We (AppArmor team) have a 6.11 in-development kernel installable from https://launchpad.net/~apparmor-dev/+archive/ubuntu/prompt-dev/+packages with a number of fixes
[21:20] <rlee287> And the issue you ran into doesn't manifest when I have that kernel installed
[21:20] <ahasenack> just to refresh, which permission denied error did you try to reproduce?
[21:20] <rlee287> The first pastebin that you sent, with the hello.txt and permission denied with only an AUDIT entry (but no DENIED entry)
[21:21] <rlee287> jjohansen: did you apply a bugfix to your kernel recently that would have fixed this?
[21:22] <jjohansen> uhmmm, give me a minute to read back scroll
[21:23] <ahasenack> rlee287: this one? https://pastebin.ubuntu.com/p/k4TvXHWsz7/
[21:23] <rlee287> Yep
[21:23] <ahasenack> jjohansen: ^
[21:24] <rlee287> *where the permission denied without a DENIED log occurs with a stock Oracular kernel but not the prompt-dev PPA kernel
[21:24] <ahasenack> rlee287: so in the prompt-dev kernel, you still had a denied in the terminal, AND a DENIED in the logs? Or what was different?
[21:25] <rlee287> In the prompt-dev kernel the cat worked and there was only the AUDIT corresponding to the transition, as expected
[21:25] <ahasenack> the cat worked, with the "audit deny capability," line in the profile?
[21:25] <rlee287> Yep
[21:26] <rlee287> Might have misremembered if there was an AUDIT print with the new kernel actually, let me recheck
[21:27] <jjohansen> ahasenack: by stock you mean the 6.8 kernel correct? not the 6.11 kernel in -proposed
[21:27] <ahasenack> 6.8.0-31
[21:32] <jjohansen> so I don't remember and can't see anything that would fix/change the auditing of the capability between 6.8 and 6.11
[21:32] <rlee287> Actually, it isn't working with the new kernel either this time, huh
[21:32] <rlee287> It did work for me when I tried it after setting up the prompt testing stuff; let me investigate further
[21:32] <jjohansen> my guess is its the capability audit cache, that is tripping, preventing it from being audited
[21:35] <ahasenack> my other question is, when I change that capability rule to allow, I can do this: https://pastebin.ubuntu.com/p/rGcCTvs5zc/
[21:36] <jjohansen> capabilities fire at such a high rate, there is a small special dedup cache, that stores the last profile and last set of caps audited
[21:37] <jjohansen> so if there was a denial previously, before caps were audited for a different profile it would effectively hide the caps request
[21:37] <jjohansen> the cache needs to be made smarter so it ages out after a few seconds, but atm it doesn't
[21:43] <rlee287> exit
[21:43] <rlee287> *whoops, that was meant for my terminal
[21:45] <jjohansen> nice passwd ;)
[22:02] <rlee287> Now I'm unable to reproduce the cat command working the first time, and when I audit allow capabilities I also get a DAC_READ_SEARCH audit
[22:02] <rlee287> No idea what might have happened the first time; sorry if I got your hopes up
[22:03] <jjohansen> rlee287: create a dummy profile, using a different name, stick the rules
[22:03] <jjohansen>   allow all,
[22:03] <jjohansen>   deny capability,
[22:03] <jjohansen> in it
[22:04] <jjohansen> use aa-exec -p dummy_profile_name -- your exe
[22:04] <jjohansen> the goal here is to get a different profile name in the dedup cache
[22:05] <jjohansen> oop, make that "audit deny capability"
[22:05] <jjohansen> after you get a deny for that, you should be able to get 1 capabilty deny message again for the other
[22:06] <jjohansen> I am pretty sure you are seeing the capability cache dedup behavior
[22:06] <jjohansen> I have an nice little kernel project for you :)
[22:12] <rlee287> With the dummy profile I get the DENIED print, but I get no DENIED prints for the raw unshare (without the aa-exec)
[22:14] <rlee287> But the DENIED print with the dummy profile is for DAC_OVERRIDE
[22:14] <rlee287> Since this also affects noble I'm going to switch back to my existing Noble VM (with more debugging infrastructure set up) to dig in further
[22:21] <jjohansen> hrmmm, so I know I have seen the denied capability messages for the unprivileged_userns profile
[22:22] <jjohansen> make sure you set printk_ratelimit and printk_ratelimit_burst
[22:22] <jjohansen> in this case burst is probably more important
